--- drivers/video/msm/logo.c
+++ drivers/video/msm/logo.c
@@ -89,55 +89,57 @@
 		err = -EIO;
 		goto err_logo_free_data;
 	}
+
 	width = fb_width(info);
 	stride = fb_linewidth(info);
 	max = width * fb_height(info);
 	ptr = data;
 	if (bf_supported && (info->node == 1 || info->node == 2)) {
 		err = -EPERM;
-		pr_err("%s:%d no info->screen_base on fb%d!\n",
+		pr_err("%s:%d no info->creen_base on fb%d!\n",
 		       __func__, __LINE__, info->node);
 		goto err_logo_free_data;
 	}
-	bits = (unsigned char *)(info->screen_base);
-	while (count > 3) {
-		int n = ptr[0];
-
-		if (n > max)
-			break;
-		max -= n;
-		while (n > 0) {
-			unsigned int j =
-				(line_pos + n > width ? width-line_pos : n);
-
-			if (fb_depth(info) == 2)
-				memset16(bits, swab16(ptr[1]), j << 1);
-			else {
-				unsigned int widepixel = ptr[1];
-				/*
-				 * Format is RGBA, but fb is big
-				 * endian so we should make widepixel
-				 * as ABGR.
-				 */
-				widepixel =
-					/* red :   f800 -> 000000f8 */
-					(widepixel & 0xf800) >> 8 |
-					/* green : 07e0 -> 0000fc00 */
-					(widepixel & 0x07e0) << 5 |
-					/* blue :  001f -> 00f80000 */
-					(widepixel & 0x001f) << 19;
-				memset32(bits, widepixel, j << 2);
-			}
-			bits += j * fb_depth(info);
-			line_pos += j;
-			n -= j;
-			if (line_pos == width) {
-				bits += (stride-width) * fb_depth(info);
-				line_pos = 0;
+	if (info->screen_base) {
+		bits = (unsigned char *)(info->screen_base);
+		while (count > 3) {
+			int n = ptr[0];
+			if (n > max)
+				break;
+			max -= n;
+			while (n > 0) {
+				unsigned int j =
+					(line_pos + n > width ? width-line_pos : n);
+	
+				if (fb_depth(info) == 2)
+					memset16(bits, swab16(ptr[1]), j << 1);
+				else {
+					unsigned int widepixel = ptr[1];
+					/*
+					* Format is RGBA, but fb is big
+					 * endian so we should make widepixel
+					 * as ABGR.
+					 */
+					widepixel =
+						/* red :   f800 -> 000000f8 */
+						(widepixel & 0xf800) >> 8 |
+						/* green : 07e0 -> 0000fc00 */
+						(widepixel & 0x07e0) << 5 |
+						/* blue :  001f -> 00f80000 */
+						(widepixel & 0x001f) << 19;
+					memset32(bits, widepixel, j << 2);
+				}
+				bits += j * fb_depth(info);
+				line_pos += j;
+				n -= j;
+				if (line_pos == width) {
+					bits += (stride-width) * fb_depth(info);
+					line_pos = 0;
+				}
 			}
+			ptr += 2;
+			count -= 4;
 		}
-		ptr += 2;
-		count -= 4;
 	}
 
 err_logo_free_data:
